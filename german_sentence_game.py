import os
import sys
import subprocess
import random
import difflib
import signal
import warnings
import readline
import requests
from dotenv import load_dotenv
load_dotenv()

warnings.filterwarnings("ignore", message="Recommended: pip install sacremoses.")

# Auto-install required packages
def ensure_packages():
	required = {
		"colorama": None,
		"numpy": "<2",
		"requests": None
	}
	for pkg, version in required.items():
		try:
			__import__(pkg)
		except ImportError:
			version_str = f"{pkg}{version}" if version else pkg
			print(f"üì¶ Installing missing package: {version_str}")
			subprocess.check_call([sys.executable, "-m", "pip", "install", version_str])

ensure_packages()

from colorama import Fore, Style, init as colorama_init
colorama_init()

# Load model

ENC_FILE = "results.enc"

def simple_encrypt(text, shift=3):
	return ''.join(chr((ord(c) + shift) % 256) for c in text)

def translate_to_german(english_sentence):
	api_key = os.environ.get("DEEPL_API_KEY")

	if not api_key:
		return "‚ùå Error: DEEPL_API_KEY not set."

	url = "https://api-free.deepl.com/v2/translate"
	data = {
		"auth_key": api_key,
		"text": english_sentence,
		"target_lang": "DE"
	}
	response = requests.post(url, data=data)

	try:
		json_data = response.json()
		print("üîÅ DeepL response:", response.status_code, response.text)  # ‚úÖ print for Render logs

		if "translations" in json_data:
			return json_data["translations"][0]["text"]
		elif "message" in json_data:
			return f"‚ùå DeepL API Error: {json_data['message']}"
		else:
			return "‚ùå Unknown translation error."
	except Exception as e:
		return f"‚ùå API failure: {str(e)}"


def get_feedback(student_version, correct_version):
	from german_sentence_game import Fore, Style  # if needed from separate module

	student_words = student_version.strip().split()
	correct_words = correct_version.strip().split()

	output = []
	explanation = []

	# Detect sentence type (case-insensitive)
	w_question_words = [
		"wie", "was", "wann", "wo", "warum", "wer", "wieso", "woher", "wohin", "welche", "welcher", "welches"
	]

	first_word = correct_words[0].lower() if correct_words else ""
	is_question = correct_version.strip().endswith("?")
	is_w_question = is_question and first_word in w_question_words
	is_yesno_question = is_question and not is_w_question and first_word not in w_question_words and first_word.isalpha()

	# Special case: same words, wrong order (case-insensitive)
	if sorted([w.lower() for w in student_words]) == sorted([w.lower() for w in correct_words]) \
			and [w.lower() for w in student_words] != [w.lower() for w in correct_words]:

		output_colored = []
		for idx, word in enumerate(student_words):
			correct_word = correct_words[idx] if idx < len(correct_words) else ""
			if word.lower() == correct_word.lower():
				output_colored.append(Fore.GREEN + word + Style.RESET_ALL)
			elif word.lower() in [w.lower() for w in correct_words]:
				output_colored.append(Fore.RED + word + Style.RESET_ALL)
			else:
				output_colored.append(Fore.YELLOW + word + Style.RESET_ALL)

		if is_w_question:
			feedback_text = (
				"‚ö†Ô∏è Your words are correct, but the **word order is incorrect for a W-question**.\n"
				"üìò Rule: **W-word ‚Äì Verb ‚Äì Subject ‚Äì ...**\n"
				"üìå Example: *Wie ist das Wetter heute?*\n"
				"üõ†Ô∏è Make sure the conjugated verb comes right after the W-word.\n"
				f"\nüß© Your version: {' '.join(output_colored)}"
			)
		elif is_yesno_question:
			feedback_text = (
				"‚ö†Ô∏è Your words are correct, but the **word order is incorrect for a yes/no question**.\n"
				"üìò Rule: **Verb ‚Äì Subject ‚Äì Object ‚Äì ...**\n"
				"üìå Example: *Geht er heute zur Schule?*\n"
				"üõ†Ô∏è In yes/no questions, the conjugated verb must be at the beginning.\n"
				f"\nüß© Your version: {' '.join(output_colored)}"
			)
		else:
			feedback_text = (
				"‚ö†Ô∏è Your words are correct, but the **word order is incorrect for a main clause**.\n"
				"üìò Rule: **Subject ‚Äì Verb ‚Äì Time ‚Äì Manner ‚Äì Place ‚Äì Object ‚Äì Infinitive**\n"
				"üìå Example: *Ich gehe heute mit meinem Hund spazieren.*\n"
				"üëÄ Pay attention to time/place blocks and that the **conjugated verb is always in second position**.\n"
				f"\nüß© Your version: {' '.join(output_colored)}"
			)

		return False, feedback_text

	# Else: full comparison (still colorized and case-sensitive for learner clarity)
	import difflib
	sm = difflib.SequenceMatcher(None, correct_words, student_words)
	opcodes = sm.get_opcodes()

	for tag, i1, i2, j1, j2 in opcodes:
		if tag == 'equal':
			for w in correct_words[i1:i2]:
				output.append(Fore.GREEN + w + Style.RESET_ALL)
		elif tag == 'replace':
			for w1, w2 in zip(correct_words[i1:i2], student_words[j1:j2]):
				output.append(Fore.RED + w2 + Style.RESET_ALL)
				explanation.append(f"‚ùå '{w2}' sollte '{w1}' sein.")
		elif tag == 'delete':
			for w in correct_words[i1:i2]:
				output.append(Fore.RED + "___" + Style.RESET_ALL)
				explanation.append(f"‚ùå Es fehlt das Wort '{w}'.")
		elif tag == 'insert':
			for w in student_words[j1:j2]:
				output.append(Fore.YELLOW + w + Style.RESET_ALL)
				explanation.append(f"üü° Zus√§tzliches Wort: '{w}'")

	all_correct = len(explanation) == 0

	if all_correct:
		feedback_text = "‚úÖ Deine √úbersetzung ist korrekt!"
	else:
		feedback_text = " ".join(output) + "\n\nüìò Erkl√§rungen:\n" + "\n".join(explanation)

	return all_correct, feedback_text

# Level 1 game
LEVELS = [
	"Ich hei√üe Anna",
	"Wir wohnen in Berlin",
	"Er trinkt jeden Morgen Kaffee",
	"Morgen fahre ich mit dem Bus zur Schule",
	"Am Wochenende spiele ich gern Fu√üball",
	"Sie m√∂chte ein neues Auto kaufen",
	"Kannst du mir bitte helfen",
	"Ich habe gestern einen interessanten Film gesehen",
	"Wenn ich Zeit habe, besuche ich meine Gro√üeltern",
	"Obwohl es regnet, gehen wir spazieren"
]

def play_level(level, sentence):
	words = sentence.split()
	scrambled = words[:]
	random.shuffle(scrambled)

	print(f"\nüß© Level {level+1}:\nüëâ Ordne die W√∂rter richtig:")
	print(" ".join(scrambled))

	answer = input("\n‚úçÔ∏è Deine Antwort:\n> ").strip()
	correct = (answer == sentence)
	status = "Richtig" if correct else "Falsch"
	return correct, status, answer

def explain_word_order(correct_sentence):
	print("\nüìö Erkl√§rung zur Wortstellung:")
	print("‚û°Ô∏è Subjekt ‚Äì Verb ‚Äì (Zeit) ‚Äì (Art und Weise) ‚Äì (Ort) ‚Äì Objekt ‚Äì [Infinitiv am Ende]\n")
	print("üëâ Korrekte Reihenfolge:")
	print(f"‚û°Ô∏è {correct_sentence}")
	print("üîÅ Achte darauf, dass das konjugierte Verb immer an zweiter Stelle steht!")

def mode_one(name):
	score = 0
	for i, sentence in enumerate(LEVELS):
		correct, status, user_answer = play_level(i, sentence)

		if correct:
			print("‚úÖ Richtig! Weiter so!")
			score += 1
		else:
			print("‚ùå Das war nicht korrekt.")
			explain_word_order(sentence)

		result_line = f"Level {i+1} - {name}: {status} ({user_answer})\n"
		encrypted = simple_encrypt(result_line)

		with open(ENC_FILE, "a") as f:
			f.write(encrypted + "\n")

	print("\nüèÅ Spiel beendet!")
	print(f"üéØ {name}, dein Ergebnis: {score}/10")

def mode_two(name):
	print("\n‚úèÔ∏è Enter an English sentence. The system will translate it automatically into German.")
	print("Then you'll type your own translation and get feedback.\n")

	while True:
		english = input("üìò English (or 'q' to quit):\n> ").strip()
		if english.lower() == 'q':
			break

		try:
			print("‚è≥ Translating locally with transformer model...")
			correct_german = translate_to_german(english)

			while True:
				student_input = input("\nüìô Your German translation (or '3' to reveal solution):\n> ").strip()

				if student_input == '3':
					print(f"\nü§ñ Model translation:\n‚û°Ô∏è {correct_german}")
					print("‚ÑπÔ∏è Feedback skipped.\n")
					break

				print(f"\nü§ñ Model translation:\n‚û°Ô∏è {correct_german}")

				correct, feedback = get_feedback(student_input, correct_german)
				print(f"\nüìù Feedback:\n{feedback}")

				# Save clean version only (without color codes)
				clean_feedback = feedback.replace(Fore.GREEN, "").replace(Fore.RED, "").replace(Fore.YELLOW, "").replace(Style.RESET_ALL, "")
				result_line = f"{name} - EN: {english} | DE: {student_input} => {clean_feedback}\n"
				encrypted = simple_encrypt(result_line)

				with open(ENC_FILE, "a") as f:
					f.write(encrypted + "\n")

				if correct:
					break
				else:
					print("üîÅ Try again or type '3' to reveal the solution.")

		except Exception as e:
			print("‚ö†Ô∏è Error during processing:", e)


def main():
	print("üß† Willkommen zum Satz-Bau-Spiel!")
	name = input("Wie hei√üt du? > ")
	global ENC_FILE
	ENC_FILE = f"{name}_result.enc"

	print("\nW√§hle den Modus:")
	print("1Ô∏è‚É£ Satz-Reihenfolge-Spiel (A1‚ÄìB1)")
	print("2Ô∏è‚É£ Freie √úbersetzung + Offline-Feedback (Transformers)")

	choice = input("\nModus w√§hlen (1 oder 2): ").strip()

	if choice == "1":
		mode_one(name)
	elif choice == "2":
		mode_two(name)
	else:
		print("‚ùå Ung√ºltige Auswahl.")

if __name__ == "__main__":
	try:
		main()
	except KeyboardInterrupt:
		print("\nüëã Auf Wiedersehen!")
		sys.exit(0)
