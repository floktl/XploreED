import os
import sys
import subprocess
import random
import difflib
import signal
import warnings
warnings.filterwarnings("ignore", message="Recommended: pip install sacremoses.")

# Auto-install required packages
def ensure_packages():
	required = ["transformers", "torch", "sentencepiece", "colorama"]
	for pkg in required:
		try:
			__import__(pkg)
		except ImportError:
			print(f"üì¶ Installing missing package: {pkg}")
			subprocess.check_call([sys.executable, "-m", "pip", "install", pkg])

ensure_packages()

from transformers import MarianMTModel, MarianTokenizer
from colorama import Fore, Style, init as colorama_init
colorama_init()

# Load model
model_name = "Helsinki-NLP/opus-mt-en-de"
tokenizer = MarianTokenizer.from_pretrained(model_name)
model = MarianMTModel.from_pretrained(model_name)

ENC_FILE = "results.enc"

def simple_encrypt(text, shift=3):
	return ''.join(chr((ord(c) + shift) % 256) for c in text)

def translate_to_german(english_sentence):
	inputs = tokenizer([english_sentence], return_tensors="pt", padding=True)
	translated = model.generate(**inputs)
	german = tokenizer.decode(translated[0], skip_special_tokens=True)
	return german

def get_feedback(student_version, correct_version):
	student_words = student_version.strip().split()
	correct_words = correct_version.strip().split()

	output = []
	explanation = []

	sm = difflib.SequenceMatcher(None, correct_words, student_words)
	opcodes = sm.get_opcodes()

	for tag, i1, i2, j1, j2 in opcodes:
		if tag == 'equal':
			for w in correct_words[i1:i2]:
				output.append(Fore.GREEN + w + Style.RESET_ALL)
		elif tag == 'replace':
			for w1, w2 in zip(correct_words[i1:i2], student_words[j1:j2]):
				output.append(Fore.RED + w2 + Style.RESET_ALL)
				explanation.append(f"‚ùå '{w2}' sollte '{w1}' sein.")
		elif tag == 'delete':
			for w in correct_words[i1:i2]:
				output.append(Fore.RED + "___" + Style.RESET_ALL)
				explanation.append(f"‚ùå Es fehlt das Wort '{w}'.")
		elif tag == 'insert':
			for w in student_words[j1:j2]:
				output.append(Fore.YELLOW + w + Style.RESET_ALL)
				explanation.append(f"üü° Zus√§tzliches Wort: '{w}'")

	all_correct = (len(explanation) == 0)
	feedback_text = "‚úÖ Deine √úbersetzung ist korrekt!" if all_correct else (
		" ".join(output) + "\n\nüìò Erkl√§rungen:\n" + "\n".join(explanation)
	)
	return all_correct, feedback_text

# Level 1 game
LEVELS = [
	"Ich hei√üe Anna",
	"Wir wohnen in Berlin",
	"Er trinkt jeden Morgen Kaffee",
	"Morgen fahre ich mit dem Bus zur Schule",
	"Am Wochenende spiele ich gern Fu√üball",
	"Sie m√∂chte ein neues Auto kaufen",
	"Kannst du mir bitte helfen",
	"Ich habe gestern einen interessanten Film gesehen",
	"Wenn ich Zeit habe, besuche ich meine Gro√üeltern",
	"Obwohl es regnet, gehen wir spazieren"
]

def play_level(level, sentence):
	words = sentence.split()
	scrambled = words[:]
	random.shuffle(scrambled)

	print(f"\nüß© Level {level+1}:\nüëâ Ordne die W√∂rter richtig:")
	print(" ".join(scrambled))

	answer = input("\n‚úçÔ∏è Deine Antwort:\n> ").strip()
	correct = (answer == sentence)
	status = "Richtig" if correct else "Falsch"
	return correct, status, answer

def explain_word_order(correct_sentence):
	print("\nüìö Erkl√§rung zur Wortstellung:")
	print("‚û°Ô∏è Subjekt ‚Äì Verb ‚Äì (Zeit) ‚Äì (Art und Weise) ‚Äì (Ort) ‚Äì Objekt ‚Äì [Infinitiv am Ende]\n")
	print("üëâ Korrekte Reihenfolge:")
	print(f"‚û°Ô∏è {correct_sentence}")
	print("üîÅ Achte darauf, dass das konjugierte Verb immer an zweiter Stelle steht!")

def mode_one(name):
	score = 0
	for i, sentence in enumerate(LEVELS):
		correct, status, user_answer = play_level(i, sentence)

		if correct:
			print("‚úÖ Richtig! Weiter so!")
			score += 1
		else:
			print("‚ùå Das war nicht korrekt.")
			explain_word_order(sentence)

		result_line = f"Level {i+1} - {name}: {status} ({user_answer})\n"
		encrypted = simple_encrypt(result_line)

		with open(ENC_FILE, "a") as f:
			f.write(encrypted + "\n")

	print("\nüèÅ Spiel beendet!")
	print(f"üéØ {name}, dein Ergebnis: {score}/10")

def mode_two(name):
	print("\n‚úèÔ∏è Enter an English sentence. The system will translate it automatically into German.")
	print("Then you'll type your own translation and get feedback.\n")

	while True:
		english = input("üìò English (or 'q' to quit):\n> ").strip()
		if english.lower() == 'q':
			break

		try:
			print("‚è≥ Translating locally with transformer model...")
			correct_german = translate_to_german(english)

			student_input = input("\nüìô Your German translation:\n> ").strip()

			print(f"\nü§ñ Model translation:\n‚û°Ô∏è {correct_german}")

			correct, feedback = get_feedback(student_input, correct_german)
			print(f"\nüìù Feedback:\n{feedback}")

			# Save clean version only (without color codes)
			clean_feedback = feedback.replace(Fore.GREEN, "").replace(Fore.RED, "").replace(Fore.YELLOW, "").replace(Style.RESET_ALL, "")
			result_line = f"{name} - EN: {english} | DE: {student_input} => {clean_feedback}\n"
			encrypted = simple_encrypt(result_line)

			with open(ENC_FILE, "a") as f:
				f.write(encrypted + "\n")

		except Exception as e:
			print("‚ö†Ô∏è Error during processing:", e)

def main():
	print("üß† Willkommen zum Satz-Bau-Spiel!")
	name = input("Wie hei√üt du? > ")
	global ENC_FILE
	ENC_FILE = f"{name}_result.enc"

	print("\nW√§hle den Modus:")
	print("1Ô∏è‚É£ Satz-Reihenfolge-Spiel (A1‚ÄìB1)")
	print("2Ô∏è‚É£ Freie √úbersetzung + Offline-Feedback (Transformers)")

	choice = input("\nModus w√§hlen (1 oder 2): ").strip()

	if choice == "1":
		mode_one(name)
	elif choice == "2":
		mode_two(name)
	else:
		print("‚ùå Ung√ºltige Auswahl.")

if __name__ == "__main__":
	try:
		main()
	except KeyboardInterrupt:
		print("\nüëã Auf Wiedersehen!")
		sys.exit(0)
